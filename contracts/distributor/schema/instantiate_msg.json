{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "InstantiateMsg",
	"type": "object",
	"required": [
		"decrement_multiplier",
		"emission_cap",
		"emission_floor",
		"test_token",
		"increment_multiplier",
		"owner",
		"spend_limit",
		"whitelist"
	],
	"properties": {
		"decrement_multiplier": {
			"$ref": "#/definitions/Decimal256"
		},
		"emission_cap": {
			"$ref": "#/definitions/Decimal256"
		},
		"emission_floor": {
			"$ref": "#/definitions/Decimal256"
		},
		"test_token": {
			"type": "string"
		},
		"increment_multiplier": {
			"$ref": "#/definitions/Decimal256"
		},
		"owner": {
			"type": "string"
		},
		"spend_limit": {
			"$ref": "#/definitions/Uint128"
		},
		"whitelist": {
			"type": "array",
			"items": {
				"type": "string"
			}
		}
	},
	"definitions": {
		"Decimal256": {
			"description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0 The greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^128 - 1) / 10^18)",
			"type": "string"
		},
		"Uint128": {
			"description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
			"type": "string"
		}
	}
}
