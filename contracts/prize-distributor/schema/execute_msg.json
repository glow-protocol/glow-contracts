{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Register Contracts contract address - restricted to owner",
      "type": "object",
      "required": [
        "register_contracts"
      ],
      "properties": {
        "register_contracts": {
          "type": "object",
          "required": [
            "community_contract",
            "distributor_contract",
            "gov_contract"
          ],
          "properties": {
            "community_contract": {
              "description": "Community treasury contract that accrues and manages protocol fees",
              "type": "string"
            },
            "distributor_contract": {
              "description": "Faucet contract to drip GLOW token to users and update Glow emission rate",
              "type": "string"
            },
            "gov_contract": {
              "description": "Gov contract tracks ve balances",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update contract configuration - restricted to owner",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "epoch_interval": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "instant_withdrawal_fee": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal256"
                },
                {
                  "type": "null"
                }
              ]
            },
            "lotto_winner_boost_config": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BoostConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_holders": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "max_tickets_per_depositor": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "oracle_addr": {
              "type": [
                "string",
                "null"
              ]
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "paused": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "reserve_factor": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal256"
                },
                {
                  "type": "null"
                }
              ]
            },
            "unbonding_period": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update lottery configuration - restricted to owner",
      "type": "object",
      "required": [
        "update_lottery_config"
      ],
      "properties": {
        "update_lottery_config": {
          "type": "object",
          "properties": {
            "block_time": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "lottery_interval": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "prize_distribution": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Decimal256"
              },
              "maxItems": 7,
              "minItems": 7
            },
            "round_delta": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "ticket_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint256"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit amount of stable into the pool",
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "required": [
            "encoded_tickets"
          ],
          "properties": {
            "encoded_tickets": {
              "type": "string"
            },
            "operator": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit amount of stable into the pool in the name of the recipient",
      "type": "object",
      "required": [
        "gift"
      ],
      "properties": {
        "gift": {
          "type": "object",
          "required": [
            "encoded_tickets",
            "recipient"
          ],
          "properties": {
            "encoded_tickets": {
              "type": "string"
            },
            "operator": {
              "type": [
                "string",
                "null"
              ]
            },
            "recipient": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Sponsor the pool. If award is true, sponsor the award available directly",
      "type": "object",
      "required": [
        "sponsor"
      ],
      "properties": {
        "sponsor": {
          "type": "object",
          "properties": {
            "award": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "prize_distribution": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Decimal256"
              },
              "maxItems": 7,
              "minItems": 7
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraws the sponsorship of the sender",
      "type": "object",
      "required": [
        "sponsor_withdraw"
      ],
      "properties": {
        "sponsor_withdraw": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraws amount from the pool. If amount is None, it tries to withdraw all the pooled funds of the sender. If instant true, incurs on withdrawal fee.",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "properties": {
            "amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "instant": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim unbonded withdrawals",
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claims pending lottery prizes for a given list of lottery ids",
      "type": "object",
      "required": [
        "claim_lottery"
      ],
      "properties": {
        "claim_lottery": {
          "type": "object",
          "required": [
            "lottery_ids"
          ],
          "properties": {
            "lottery_ids": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claims pending depositor rewards",
      "type": "object",
      "required": [
        "claim_rewards"
      ],
      "properties": {
        "claim_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "First step on the lottery execution. Sets oracle round number",
      "type": "object",
      "required": [
        "execute_lottery"
      ],
      "properties": {
        "execute_lottery": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Second step (paginated) on the lottery execution. Sets winner sequence and stores winning sequences",
      "type": "object",
      "required": [
        "execute_prize"
      ],
      "properties": {
        "execute_prize": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates rewards emission rate and transfer outstanding reserve to gov",
      "type": "object",
      "required": [
        "execute_epoch_ops"
      ],
      "properties": {
        "execute_epoch_ops": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Handles the migrate loop",
      "type": "object",
      "required": [
        "migrate_old_depositors"
      ],
      "properties": {
        "migrate_old_depositors": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BoostConfig": {
      "type": "object",
      "required": [
        "base_multiplier",
        "max_multiplier",
        "total_voting_power_weight"
      ],
      "properties": {
        "base_multiplier": {
          "$ref": "#/definitions/Decimal256"
        },
        "max_multiplier": {
          "$ref": "#/definitions/Decimal256"
        },
        "total_voting_power_weight": {
          "$ref": "#/definitions/Decimal256"
        }
      }
    },
    "Decimal256": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0 The greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "type": "string"
    }
  }
}
