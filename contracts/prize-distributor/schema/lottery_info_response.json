{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "LotteryInfoResponse",
  "type": "object",
  "required": [
    "awarded",
    "block_height",
    "glow_prize_buckets",
    "lottery_id",
    "number_winners",
    "page",
    "prize_buckets",
    "rand_round",
    "sequence",
    "timestamp",
    "total_user_lottery_deposits"
  ],
  "properties": {
    "awarded": {
      "type": "boolean"
    },
    "block_height": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "glow_prize_buckets": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Uint256"
      },
      "maxItems": 7,
      "minItems": 7
    },
    "lottery_id": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "number_winners": {
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "maxItems": 7,
      "minItems": 7
    },
    "page": {
      "type": "string"
    },
    "prize_buckets": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Uint256"
      },
      "maxItems": 7,
      "minItems": 7
    },
    "rand_round": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "sequence": {
      "type": "string"
    },
    "timestamp": {
      "$ref": "#/definitions/Timestamp"
    },
    "total_user_lottery_deposits": {
      "$ref": "#/definitions/Uint256"
    }
  },
  "definitions": {
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint256": {
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
